import { EnhancedAliceAI, UserProfile, AIResponse } from './alice-enhanced-ai';

export interface HumanizedResponse {
  message: string;
  emotion: 'caring' | 'curious' | 'encouraging' | 'empathetic' | 'professional';
  followUpQuestions: string[];
  topics: string[];
  connectionPoints: string[]; // Para mesclar especialidades
  returnToPoint?: string; // Para voltar ao ponto original
}

export class HumanizedAliceAI extends EnhancedAliceAI {
  private static conversationFlow: Map<string, any> = new Map();
  
  // Respostas acolhedoras e humanizadas
  private static humanizedResponses = {
    welcomes: [
      "Ol√°! Que bom ter voc√™ aqui! üòä Antes de come√ßarmos, quero te ouvir: como voc√™ est√° hoje, f√≠sica e emocionalmente?",
      "Oi! √â um prazer te conhecer! üíö Me conta, como voc√™ tem se sentido ultimamente? Estou aqui para te ouvir e apoiar.",
      "Seja muito bem-vinda! ‚ú® Quero come√ßar te conhecendo melhor... Como est√° seu cora√ß√£o e seu corpo hoje?",
      "Que alegria te receber aqui! üåü Vamos come√ßar com o mais importante: como voc√™ est√° se sentindo agora?"
    ],
    
    validations: [
      "Entendo... obrigada por compartilhar isso comigo. Isso j√° me ajuda muito a pensar em como posso te apoiar de forma personalizada.",
      "Que importante voc√™ me contar isso! üíö Vou guardar essa informa√ß√£o para pensarmos juntas no melhor caminho.",
      "Fico feliz que voc√™ se sinta √† vontade para dividir isso comigo. Estou aqui para te acolher e caminhar junto.",
      "Obrigada pela confian√ßa! Essas informa√ß√µes s√£o preciosas para criarmos algo realmente especial para voc√™."
    ],
    
    transitions: [
      "Interessante o que voc√™ me contou... Voc√™ sabe que nossa alimenta√ß√£o, nossos nutrientes e nossos movimentos est√£o todos conectados? Quer que eu mostre como isso funciona no seu caso?",
      "Olha, isso que voc√™ falou me fez pensar... Posso conectar algumas √°reas que talvez voc√™ n√£o tenha pensado antes. Alimenta√ß√£o, vitaminas e movimento trabalham juntos. Te interessa explorar isso?",
      "Que bom que voc√™ trouxe isso! Sabia que posso olhar para sua sa√∫de de forma integrativa? Nutri√ß√£o, equil√≠brio molecular e movimento f√≠sico... tudo faz parte do mesmo quebra-cabe√ßa. Vamos montar juntas?",
      "Adorei sua sinceridade! Agora posso te ajudar de forma mais completa, olhando tanto para o que voc√™ come, quanto para o que seu corpo precisa de nutrientes, e como seu f√≠sico responde. Topas essa jornada comigo?"
    ],
    
    choices: [
      "Voc√™ gostaria que a gente come√ßasse falando sobre sua alimenta√ß√£o, sua energia no dia a dia, ou sobre como seu corpo tem se sentido?",
      "Me diz: prefere que conversemos primeiro sobre seus h√°bitos alimentares, sobre seu equil√≠brio de vitaminas, ou sobre seus movimentos e exerc√≠cios?",
      "Por onde voc√™ gostaria de come√ßar nossa conversa? Alimenta√ß√£o, energia/vitaminas ou movimento do corpo?",
      "Qual dessas √°reas chama mais sua aten√ß√£o agora: nutri√ß√£o, equil√≠brio molecular ou fisioterapia funcional?"
    ]
  };

  // Sistema de conex√µes entre especialidades
  private static specialtyConnections = {
    nutrition_to_orthomolecular: [
      "Isso que voc√™ falou sobre alimenta√ß√£o me fez pensar... √Äs vezes pequenas car√™ncias de vitaminas espec√≠ficas podem estar por tr√°s dessas sensa√ß√µes. J√° avaliou vitamina D, B12 ou magn√©sio?",
      "Interessante! Sabia que alguns sinais alimentares podem refletir necessidades espec√≠ficas de micronutrientes? Vamos investigar isso?"
    ],
    
    nutrition_to_physiotherapy: [
      "Legal! E voc√™ sabe que a digest√£o melhora muito com movimentos espec√≠ficos? Alguns alongamentos e exerc√≠cios respirat√≥rios potencializam tudo que voc√™ come.",
      "Que bom! Alimenta√ß√£o e movimento s√£o parceiros. Posso te mostrar como alguns exerc√≠cios ajudam na absor√ß√£o dos nutrientes?"
    ],
    
    orthomolecular_to_nutrition: [
      "Falando em vitaminas... voc√™ sabia que a alimenta√ß√£o √© a base para potencializar qualquer suplementa√ß√£o? Vamos ver como est√° sua base alimentar?",
      "Perfeito! E claro, nenhuma vitamina funciona bem sem uma alimenta√ß√£o equilibrada por tr√°s. Me conta como anda sua rotina alimentar?"
    ],
    
    physiotherapy_to_nutrition: [
      "Adorei! E movimento sem combust√≠vel adequado n√£o funciona bem... Como anda sua alimenta√ß√£o para sustentar essa energia que voc√™ precisa?",
      "Que √≥timo! Sabia que alguns alimentos espec√≠ficos ajudam na recupera√ß√£o muscular e redu√ß√£o da inflama√ß√£o? Vamos conectar isso?"
    ]
  };

  // Perguntas de aprofundamento por √°rea
  private static deepeningQuestions = {
    nutrition: [
      "Como √© sua rotina alimentar? Voc√™ costuma fazer refei√ß√µes em hor√°rios regulares?",
      "Que tipo de alimentos te d√£o mais energia? E quais te deixam mais pesada?",
      "Voc√™ sente diferen√ßa no humor ou energia dependendo do que come?",
      "H√° algum alimento que voc√™ sente que seu corpo 'pede' ou que voc√™ evita instintivamente?"
    ],
    
    orthomolecular: [
      "J√° fez algum exame recente de vitaminas e minerais? √Äs vezes pequenas corre√ß√µes trazem muito bem-estar.",
      "Voc√™ toma sol regularmente? Como anda seu sono e sua energia no dia a dia?",
      "Sente diferen√ßa de energia entre as esta√ß√µes do ano? Isso pode nos dar pistas importantes.",
      "Tem algum sintoma recorrente que sempre volta? Cansa√ßo, dores de cabe√ßa, humor..."
    ],
    
    physiotherapy: [
      "Seu corpo tem 'reclamado' de alguma forma? Dores, limita√ß√µes ou cansa√ßo em alguma parte espec√≠fica?",
      "Como voc√™ se sente ao acordar? Descansada ou com o corpo j√° pedindo cuidado?",
      "Voc√™ faz algum tipo de movimento ou exerc√≠cio? Como seu corpo responde?",
      "Tem alguma atividade do dia a dia que te deixa mais tensa ou cansada?"
    ]
  };

  // Op√ß√µes contextuais para problemas espec√≠ficos de sa√∫de
  static getHealthContextOptions(topic: string): string[] {
    const healthOptions = {
      'problemas-digestivos': [
        "Tenho diarreia frequente",
        "Sofro com constipa√ß√£o",
        "Sinto muitos gases e incha√ßo",
        "Tenho refluxo gastrico",
        "Digest√£o pesada ap√≥s as refei√ß√µes"
      ],
      'dores-corporais': [
        "Dores de cabe√ßa constantes",
        "Dores nas costas",
        "Dores nas articula√ß√µes",
        "Tens√£o muscular",
        "Dores abdominais"
      ],
      'energia-disposicao': [
        "Cansa√ßo constante",
        "Falta de energia pela manh√£",
        "Sonol√™ncia ap√≥s o almo√ßo",
        "Ins√¥nia ou sono fragmentado",
        "Fadiga mental"
      ],
      'humor-emocional': [
        "Ansiedade frequente",
        "Mudan√ßas de humor",
        "Irritabilidade",
        "Tristeza ou melancolia",
        "Estresse excessivo"
      ],
      'peso-metabolismo': [
        "Dificuldade para emagrecer",
        "Ganho de peso s√∫bito",
        "Reten√ß√£o de l√≠quidos",
        "Metabolismo lento",
        "Compuls√£o alimentar"
      ],
      'pele-cabelo': [
        "Pele ressecada ou oleosa",
        "Acne ou espinhas",
        "Queda de cabelo",
        "Unhas fracas",
        "Dermatites ou alergias"
      ]
    };

    return healthOptions[topic as keyof typeof healthOptions] || [];
  }

  // Gerar resposta humanizada e integrativa
  static generateHumanizedResponse(
    input: string,
    userId: string,
    conversationContext: any = {}
  ): HumanizedResponse {
    const lowerInput = input.toLowerCase();
    
    // Detectar √°rea de interesse
    const areas = this.detectSpecialtyAreas(lowerInput);
    const emotion = this.detectUserEmotion(lowerInput);
    const currentTopic = conversationContext.lastTopic || 'general';
    
    // Atualizar fluxo da conversa
    const flow = this.conversationFlow.get(userId) || { topics: [], connections: [], returns: [] };
    flow.topics.push(...areas);
    this.conversationFlow.set(userId, flow);
    
    let message = "";
    let followUpQuestions: string[] = [];
    let connectionPoints: string[] = [];
    
    // Se √© primeira intera√ß√£o
    if (!conversationContext.hasStarted) {
      message = this.getRandomResponse('welcomes');
      followUpQuestions = ["Me conte como voc√™ se sente", "Prefere falar sobre alimenta√ß√£o", "Quer come√ßar pelo f√≠sico"];
    }
    // Se usu√°rio compartilhou algo pessoal
    else if (this.isPersonalSharing(lowerInput)) {
      message = this.getRandomResponse('validations');
      message += " " + this.getRandomResponse('choices');
      followUpQuestions = this.getAreaBasedQuestions(areas);
    }
    // Se est√° falando de uma √°rea espec√≠fica
    else if (areas.length > 0) {
      message = this.createIntegrativeResponse(areas, input, currentTopic);
      connectionPoints = this.generateConnectionPoints(areas);
      followUpQuestions = this.getDeepQuestions(areas[0]);
    }
    // Resposta geral acolhedora
    else {
      message = "Entendi... me conte mais sobre isso. Estou aqui para te ouvir e encontrarmos juntas o melhor caminho para voc√™ se sentir bem.";
      followUpQuestions = ["Me fale mais detalhes", "Como isso afeta seu dia", "Voc√™ j√° tentou algo para isso"];
    }
    
    return {
      message,
      emotion: this.mapToEmotion(emotion),
      followUpQuestions,
      topics: areas,
      connectionPoints,
      returnToPoint: conversationContext.originalPoint
    };
  }

  private static detectSpecialtyAreas(input: string): string[] {
    const areas: string[] = [];
    
    // Nutri√ß√£o
    if (/comer|comida|alimenta√ß√£o|refei√ß√£o|dieta|fome|peso/.test(input)) {
      areas.push('nutrition');
    }
    
    // Ortomolecular
    if (/energia|cansa√ßo|vitamina|mineral|sono|humor|disposi√ß√£o|for√ßa/.test(input)) {
      areas.push('orthomolecular');
    }
    
    // Fisioterapia
    if (/dor|movimento|exerc√≠cio|corpo|m√∫sculo|articula√ß√£o|postura|alongar/.test(input)) {
      areas.push('physiotherapy');
    }
    
    return areas;
  }

  private static isPersonalSharing(input: string): boolean {
    const personalKeywords = [
      'sinto', 'sinto-me', 'estou', 'me sinto', 'tenho', 'sofro', 'preciso',
      'n√£o consigo', 'dificulta', 'me incomoda', 'preocupa', 'angustia'
    ];
    
    return personalKeywords.some(keyword => input.includes(keyword));
  }

  private static createIntegrativeResponse(areas: string[], input: string, currentTopic: string): string {
    let response = this.getRandomResponse('validations') + " ";
    
    // Se mencionar v√°rias √°reas, fazer conex√£o
    if (areas.length > 1) {
      response += this.getRandomResponse('transitions');
    }
    // Se for √°rea espec√≠fica, aprofundar
    else if (areas.length === 1) {
      const area = areas[0];
      const questions = this.deepeningQuestions[area as keyof typeof this.deepeningQuestions];
      response += questions[Math.floor(Math.random() * questions.length)];
    }
    
    return response;
  }

  private static generateConnectionPoints(areas: string[]): string[] {
    const connections: string[] = [];
    
    if (areas.includes('nutrition') && areas.includes('orthomolecular')) {
      connections.push(...this.specialtyConnections.nutrition_to_orthomolecular);
    }
    
    if (areas.includes('nutrition') && areas.includes('physiotherapy')) {
      connections.push(...this.specialtyConnections.nutrition_to_physiotherapy);
    }
    
    return connections;
  }

  private static getRandomResponse(category: keyof typeof this.humanizedResponses): string {
    const responses = this.humanizedResponses[category];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  private static getAreaBasedQuestions(areas: string[]): string[] {
    if (areas.length === 0) return ["Como voc√™ se sente hoje?", "O que posso ajudar?"];
    
    const area = areas[0];
    return this.deepeningQuestions[area as keyof typeof this.deepeningQuestions] || [];
  }

  private static getDeepQuestions(area: string): string[] {
    return this.deepeningQuestions[area as keyof typeof this.deepeningQuestions] || [];
  }

  private static detectUserEmotion(input: string): string {
    if (/triste|deprimida|mal|p√©ssim|ruim/.test(input)) return 'sad';
    if (/animada|bem|√≥tim|feliz|alegre/.test(input)) return 'happy';
    if (/cansada|exausta|sem energia/.test(input)) return 'tired';
    if (/preocupada|ansiosa|nervosa/.test(input)) return 'anxious';
    return 'neutral';
  }

  private static mapToEmotion(emotion: string): 'caring' | 'curious' | 'encouraging' | 'empathetic' | 'professional' {
    switch (emotion) {
      case 'sad': return 'empathetic';
      case 'anxious': return 'caring';
      case 'tired': return 'encouraging';
      case 'happy': return 'curious';
      default: return 'professional';
    }
  }

  // M√©todo para retornar ao ponto original da conversa
  static returnToOriginalPoint(userId: string, originalTopic: string): HumanizedResponse {
    return {
      message: `Voltando ao que voc√™ estava me contando sobre ${originalTopic}... gostaria de aprofundar mais nisso? Estou aqui para te ouvir.`,
      emotion: 'caring',
      followUpQuestions: ["Sim, vamos continuar", "Prefiro mudar de assunto", "Quero falar de outra coisa"],
      topics: [originalTopic],
      connectionPoints: [],
      returnToPoint: originalTopic
    };
  }

  // Acolhimento final sempre perguntando se h√° mais
  static generateClosingCare(userId: string): HumanizedResponse {
    const closingMessages = [
      "Foi √≥timo conversar com voc√™ hoje! Antes de encerrar, tem algo que eu n√£o perguntei e que voc√™ gostaria de compartilhar comigo sobre sua sa√∫de, sua rotina ou at√© sobre suas emo√ß√µes?",
      "Adorei nossa conversa! üíö H√° algo mais que est√° no seu cora√ß√£o ou na sua mente que voc√™ gostaria de dividir comigo?",
      "Que bom que pudemos conversar assim! Existe alguma coisa que voc√™ sente que precisa falar e que ainda n√£o surgiu na nossa conversa?",
      "Obrigada por confiar em mim hoje! Tem algum detalhe sobre voc√™ que ainda n√£o conversamos e que voc√™ gostaria de compartilhar?"
    ];
    
    return {
      message: closingMessages[Math.floor(Math.random() * closingMessages.length)],
      emotion: 'caring',
      followUpQuestions: ["Sim, quero falar mais", "N√£o, por hoje est√° bom", "Tenho uma d√∫vida"],
      topics: ['closure'],
      connectionPoints: [],
    };
  }
}