import { useState, useEffect, useCallback } from 'react';
import { newsCache } from '@/utils/newsCache';
import { NEWS_API_URLS, NEWS_API_CONFIG } from '@/config/newsApi';

interface NewsArticle {
  id: string;
  title: string;
  description: string;
  url: string;
  publishedAt: string;
  source: {
    name: string;
  };
  category: string;
  impact: 'Cr√≠tico' | 'Alto' | 'M√©dio' | 'Baixo';
  relevance: number;
  trending: boolean;
}

interface NewsAPIResponse {
  status: string;
  totalResults: number;
  articles: Array<{
    title: string;
    description: string;
    url: string;
    publishedAt: string;
    source: {
      name: string;
    };
  }>;
}

// Temas do jogo Arena of Wisdom Wars
const GAME_THEMES = {
  'Hist√≥ria': ['hist√≥ria', 'hist√≥rico', 'antigo', 'civiliza√ß√£o', 'egito', 'eg√≠pcio', 'mesopot√¢mia', 'mesopot√¢mico', 'medieval', 'idade m√©dia', 'guerra', 'batalha', 'conquista', 'imp√©rio', 'rei', 'rainha', 'nobre', 'cavaleiro', 'guerreiro', 'soldado'],
  'Conhecimento': ['conhecimento', 'sabedoria', 'aprendizado', 'educa√ß√£o', 'estudo', 'pesquisa', 'ci√™ncia', 'descoberta', 'inova√ß√£o', 'tecnologia', 'intelig√™ncia', 'habilidade', 'compet√™ncia', 'talent', 'genialidade'],
  'Estrat√©gia': ['estrat√©gia', 't√°tico', 'planejamento', 'decis√£o', 'lideran√ßa', 'comando', 'gest√£o', 'organiza√ß√£o', 'metodologia', 'sistema', 'processo', 'otimiza√ß√£o', 'efici√™ncia'],
  'Competi√ß√£o': ['competi√ß√£o', 'competitivo', 'luta', 'duelo', 'arena', 'torneio', 'campeonato', 'ranking', 'posi√ß√£o', 'vit√≥ria', 'derrota', 'desafio', 'objetivo', 'meta', 'conquista'],
  'Economia Digital': ['economia', 'digital', 'fintech', 'blockchain', 'cryptocurrency', 'investimento', 'mercado', 'neg√≥cios', 'startup', 'empreendedorismo', 'inova√ß√£o financeira', 'tecnologia financeira'],
  'Futuro': ['futuro', 'futurista', 'tend√™ncia', 'evolu√ß√£o', 'progresso', 'avan√ßo', 'moderno', 'contempor√¢neo', 'pr√≥xima gera√ß√£o', 'emergente', 'disruptivo']
};

// Categorias de not√≠cias com impacto (focadas nos temas do jogo)
const NEWS_CATEGORIES = {
  'Hist√≥ria': { impact: 'Cr√≠tico' as const, relevance: 95, trending: true },
  'Conhecimento': { impact: 'Cr√≠tico' as const, relevance: 90, trending: true },
  'Estrat√©gia': { impact: 'Alto' as const, relevance: 85, trending: true },
  'Competi√ß√£o': { impact: 'Alto' as const, relevance: 80, trending: false },
  'Economia Digital': { impact: 'M√©dio' as const, relevance: 75, trending: false },
  'Futuro': { impact: 'M√©dio' as const, relevance: 70, trending: false },
  'Geral': { impact: 'Baixo' as const, relevance: 50, trending: false }
};

// Palavras-chave para categoriza√ß√£o autom√°tica (baseadas nos temas do jogo)
const CATEGORY_KEYWORDS = {
  'Hist√≥ria': GAME_THEMES['Hist√≥ria'],
  'Conhecimento': GAME_THEMES['Conhecimento'],
  'Estrat√©gia': GAME_THEMES['Estrat√©gia'],
  'Competi√ß√£o': GAME_THEMES['Competi√ß√£o'],
  'Economia Digital': GAME_THEMES['Economia Digital'],
  'Futuro': GAME_THEMES['Futuro'],
  'business': ['mercado', 'economia', 'empresa', 'neg√≥cio', 'financeiro', 'investimento', 'bolsa', 'crescimento'],
  'health': ['sa√∫de', 'm√©dico', 'hospital', 'vacina', 'tratamento', 'doen√ßa', 'cura', 'medicina'],
  'environment': ['clima', 'meio ambiente', 'sustentabilidade', 'energia', 'polui√ß√£o', 'natureza', 'ecologia'],
  'politics': ['pol√≠tica', 'governo', 'elei√ß√£o', 'presidente', 'ministro', 'congresso', 'senado'],
  'sports': ['futebol', 'esporte', 'jogos', 'olimp√≠adas', 'campeonato', 'atleta', 'competi√ß√£o'],
  'entertainment': ['cinema', 'm√∫sica', 'celebridade', 'filme', 's√©rie', 'show', 'arte', 'cultura']
};

export const useRealNews = () => {
  const [news, setNews] = useState<NewsArticle[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);

  // Fun√ß√£o para categorizar not√≠cia baseada no t√≠tulo e descri√ß√£o (focada nos temas do jogo)
  const categorizeNews = useCallback((title: string, description: string): string => {
    const text = `${title} ${description}`.toLowerCase();
    
    // Priorizar temas do jogo
    for (const [category, keywords] of Object.entries(CATEGORY_KEYWORDS)) {
      if (keywords.some(keyword => text.includes(keyword.toLowerCase()))) {
        return category;
      }
    }
    
    return 'Geral';
  }, []);

  // Fun√ß√£o para calcular relev√¢ncia baseada nos temas do jogo
  const calculateRelevance = useCallback((title: string, description: string): number => {
    const text = `${title} ${description}`.toLowerCase();
    
    // Palavras-chave de alta relev√¢ncia para o jogo
    const highRelevanceKeywords = [
      'hist√≥ria', 'guerra', 'batalha', 'conquista', 'imp√©rio', 'civiliza√ß√£o',
      'conhecimento', 'sabedoria', 'aprendizado', 'educa√ß√£o', 'intelig√™ncia',
      'estrat√©gia', 't√°tico', 'lideran√ßa', 'competi√ß√£o', 'arena', 'duelo',
      'economia digital', 'fintech', 'blockchain', 'inova√ß√£o', 'futuro'
    ];
    
    const matches = highRelevanceKeywords.filter(keyword => text.includes(keyword)).length;
    const baseRelevance = 40; // Relev√¢ncia base para not√≠cias do jogo
    const bonusPerMatch = 12; // B√¥nus por palavra-chave encontrada
    
    return Math.min(100, baseRelevance + (matches * bonusPerMatch));
  }, []);

  // Fun√ß√£o para buscar not√≠cias da API
  const fetchNews = useCallback(async (forceRefresh = false) => {
    try {
      setLoading(true);
      setError(null);

      // Verificar cache primeiro (se n√£o for refresh for√ßado)
      if (!forceRefresh) {
        const cachedNews = newsCache.get();
        if (cachedNews) {
          setNews(cachedNews);
          setLoading(false);
          return;
        }
      }

      // Tentar buscar dados reais da API primeiro
      let apiSuccess = false;
      
      // Tentar com m√∫ltiplas chaves da NewsAPI
      for (let keyIndex = 0; keyIndex < NEWS_API_CONFIG.API_KEYS.length && !apiSuccess; keyIndex++) {
        const currentKey = NEWS_API_CONFIG.API_KEYS[keyIndex];
        console.log(`üîë Tentando com chave ${keyIndex + 1}/${NEWS_API_CONFIG.API_KEYS.length}`);
        
        for (let attempt = 1; attempt <= 2; attempt++) {
          try {
            console.log(`üîÑ Tentativa ${attempt}/2 com chave ${keyIndex + 1}...`);
            const url = NEWS_API_URLS.TOP_HEADLINES_BR.replace(NEWS_API_CONFIG.API_KEYS[0], currentKey);
            const response = await fetch(url);
          
          if (response.ok) {
            const apiData: NewsAPIResponse = await response.json();
            
            console.log('üìä Resposta da API:', apiData);
            
            if (apiData.status === 'ok' && apiData.articles && apiData.articles.length > 0) {
              console.log(`‚úÖ ${apiData.articles.length} not√≠cias carregadas da API`);
              
              // Filtrar e priorizar not√≠cias relacionadas aos temas do jogo
              const gameRelevantNews = apiData.articles
                .map((article, index) => ({
                  id: `real-${index}`,
                  title: article.title,
                  description: article.description || '',
                  url: article.url,
                  publishedAt: article.publishedAt,
                  source: article.source,
                  category: categorizeNews(article.title, article.description || ''),
                  impact: NEWS_CATEGORIES[categorizeNews(article.title, article.description || '')]?.impact || 'M√©dio',
                  relevance: calculateRelevance(article.title, article.description || ''),
                  trending: Math.random() > 0.7 // 30% chance de ser trending
                }))
                .filter(news => news.category !== 'Geral' || news.relevance > 60) // Filtrar not√≠cias relevantes
                .sort((a, b) => b.relevance - a.relevance) // Ordenar por relev√¢ncia
                .slice(0, 10); // Pegar as 10 mais relevantes
              
              console.log(`üéØ ${gameRelevantNews.length} not√≠cias filtradas por relev√¢ncia ao jogo`);
              
              const realNews: NewsArticle[] = gameRelevantNews;

              setNews(realNews);
              setLastUpdate(new Date());
              newsCache.set(realNews);
              setLoading(false);
              apiSuccess = true;
              break;
            } else {
              console.warn('‚ö†Ô∏è API retornou dados vazios ou inv√°lidos');
              // Tentar fallback com busca mais ampla
              if (attempt === 1 && keyIndex === 0) {
                console.log('üîÑ Tentando fallback com busca mais ampla...');
                const fallbackResponse = await fetch(NEWS_API_URLS.EVERYTHING_FALLBACK);
                if (fallbackResponse.ok) {
                  const fallbackData: NewsAPIResponse = await fallbackResponse.json();
                  console.log('üìä Resposta do fallback:', fallbackData);
                  
                  if (fallbackData.status === 'ok' && fallbackData.articles && fallbackData.articles.length > 0) {
                    console.log(`‚úÖ ${fallbackData.articles.length} not√≠cias carregadas do fallback`);
                    
                    const gameRelevantNews = fallbackData.articles
                      .map((article, index) => ({
                        id: `fallback-${index}`,
                        title: article.title,
                        description: article.description || '',
                        url: article.url,
                        publishedAt: article.publishedAt,
                        source: article.source,
                        category: categorizeNews(article.title, article.description || ''),
                        impact: NEWS_CATEGORIES[categorizeNews(article.title, article.description || '')]?.impact || 'M√©dio',
                        relevance: calculateRelevance(article.title, article.description || ''),
                        trending: Math.random() > 0.7
                      }))
                      .filter(news => news.category !== 'Geral' || news.relevance > 60)
                      .sort((a, b) => b.relevance - a.relevance)
                      .slice(0, 10);
                    
                    console.log(`üéØ ${gameRelevantNews.length} not√≠cias filtradas do fallback`);
                    
                    if (gameRelevantNews.length > 0) {
                      setNews(gameRelevantNews);
                      setLastUpdate(new Date());
                      newsCache.set(gameRelevantNews);
                      setLoading(false);
                      apiSuccess = true;
                      break;
                    }
                  }
                }
                
                // Tentar GNews como segunda op√ß√£o
                console.log('üîÑ Tentando GNews API...');
                const gnewsResponse = await fetch(NEWS_API_URLS.GNEWS_TOP_BR);
                if (gnewsResponse.ok) {
                  const gnewsData = await gnewsResponse.json();
                  console.log('üìä Resposta do GNews:', gnewsData);
                  
                  if (gnewsData.articles && gnewsData.articles.length > 0) {
                    console.log(`‚úÖ ${gnewsData.articles.length} not√≠cias carregadas do GNews`);
                    
                    const gameRelevantNews = gnewsData.articles
                      .map((article: any, index: number) => ({
                        id: `gnews-${index}`,
                        title: article.title,
                        description: article.description || '',
                        url: article.url,
                        publishedAt: article.publishedAt,
                        source: { name: article.source?.name || 'GNews' },
                        category: categorizeNews(article.title, article.description || ''),
                        impact: NEWS_CATEGORIES[categorizeNews(article.title, article.description || '')]?.impact || 'M√©dio',
                        relevance: calculateRelevance(article.title, article.description || ''),
                        trending: Math.random() > 0.7
                      }))
                      .filter(news => news.category !== 'Geral' || news.relevance > 60)
                      .sort((a, b) => b.relevance - a.relevance)
                      .slice(0, 10);
                    
                    console.log(`üéØ ${gameRelevantNews.length} not√≠cias filtradas do GNews`);
                    
                    if (gameRelevantNews.length > 0) {
                      setNews(gameRelevantNews);
                      setLastUpdate(new Date());
                      newsCache.set(gameRelevantNews);
                      setLoading(false);
                      apiSuccess = true;
                      break;
                    }
                  }
                }
              }
            }
          } else {
            console.warn(`‚ö†Ô∏è API retornou status ${response.status}: ${response.statusText}`);
            const errorText = await response.text();
            console.warn('üìÑ Resposta de erro:', errorText);
          }
          } catch (apiError) {
            console.warn(`‚ùå Erro na tentativa ${attempt}/2 com chave ${keyIndex + 1}:`, apiError);
            if (attempt < 2) {
              await new Promise(resolve => setTimeout(resolve, 1000 * attempt)); // Delay progressivo
            }
          }
        }
        
        if (apiSuccess) break; // Se conseguiu com esta chave, para o loop
      }
      
      if (apiSuccess) return;
      
      // Fallback: usar dados simulados mais realistas se API n√£o dispon√≠vel
      console.log('üì∞ Usando dados simulados como fallback');
      const mockNews: NewsArticle[] = [
        {
          id: '1',
          title: 'Descoberta arqueol√≥gica revela estrat√©gias militares do Egito Antigo',
          description: 'Novos achados em tumbas eg√≠pcias mostram t√©cnicas de guerra e lideran√ßa que influenciaram civiliza√ß√µes por mil√™nios.',
          url: '#',
          publishedAt: new Date().toISOString(),
          source: { name: 'Hist√≥ria Viva' },
          category: 'Hist√≥ria',
          impact: 'Cr√≠tico',
          relevance: 95,
          trending: true
        },
        {
          id: '2',
          title: 'Intelig√™ncia Artificial revoluciona m√©todos de aprendizado',
          description: 'Novas tecnologias est√£o transformando a educa√ß√£o, criando sistemas personalizados de conhecimento e compet√™ncias.',
          url: '#',
          publishedAt: new Date(Date.now() - 3600000).toISOString(), // 1 hora atr√°s
          source: { name: 'Conhecimento Digital' },
          category: 'Conhecimento',
          impact: 'Cr√≠tico',
          relevance: 90,
          trending: true
        },
        {
          id: '3',
          title: 'Estrat√©gias de lideran√ßa medieval inspiram gest√£o moderna',
          description: 'T√©cnicas de comando e organiza√ß√£o de ex√©rcitos medievais s√£o adaptadas para lideran√ßa empresarial contempor√¢nea.',
          url: '#',
          publishedAt: new Date(Date.now() - 7200000).toISOString(), // 2 horas atr√°s
          source: { name: 'Estrat√©gia & Lideran√ßa' },
          category: 'Estrat√©gia',
          impact: 'Alto',
          relevance: 85,
          trending: true
        },
        {
          id: '4',
          title: 'Arena de competi√ß√µes digitais atrai milhares de participantes',
          description: 'Plataforma brasileira de duelos de conhecimento registra crescimento de 300% em participa√ß√£o este ano.',
          url: '#',
          publishedAt: new Date(Date.now() - 10800000).toISOString(), // 3 horas atr√°s
          source: { name: 'Competi√ß√£o Digital' },
          category: 'Competi√ß√£o',
          impact: 'Alto',
          relevance: 80,
          trending: false
        },
        {
          id: '5',
          title: 'Blockchain revoluciona sistema financeiro brasileiro',
          description: 'Tecnologia de criptomoedas e contratos inteligentes transformam economia digital nacional.',
          url: '#',
          publishedAt: new Date(Date.now() - 14400000).toISOString(), // 4 horas atr√°s
          source: { name: 'Economia Digital' },
          category: 'Economia Digital',
          impact: 'M√©dio',
          relevance: 75,
          trending: true
        }
      ];

      // Simular delay da API
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Usar dados mock por enquanto (substituir por API real depois)
      const processedNews = mockNews.map(article => ({
        ...article,
        category: categorizeNews(article.title, article.description),
        relevance: calculateRelevance(article.title, article.description)
      }));

      setNews(processedNews);
      setLastUpdate(new Date());
      
      // Salvar no cache
      newsCache.set(processedNews);
      
    } catch (err) {
      console.error('Erro ao buscar not√≠cias:', err);
      setError('Erro ao carregar not√≠cias');
    } finally {
      setLoading(false);
    }
  }, [categorizeNews, calculateRelevance]);

  // Buscar not√≠cias na inicializa√ß√£o
  useEffect(() => {
    fetchNews();
  }, [fetchNews]);

  // Atualiza√ß√£o autom√°tica a cada 15 minutos
  useEffect(() => {
    const interval = setInterval(() => {
      fetchNews();
    }, 15 * 60 * 1000); // 15 minutos

    return () => clearInterval(interval);
  }, [fetchNews]);

  // Fun√ß√£o para for√ßar atualiza√ß√£o
  const refreshNews = useCallback(() => {
    fetchNews(true); // Force refresh
  }, [fetchNews]);

  // Filtrar not√≠cias por categoria
  const getNewsByCategory = useCallback((category: string) => {
    return news.filter(article => article.category === category);
  }, [news]);

  // Obter not√≠cias mais relevantes
  const getTopNews = useCallback((limit: number = 5) => {
    return news
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, limit);
  }, [news]);

  // Obter not√≠cias em alta
  const getTrendingNews = useCallback(() => {
    return news.filter(article => article.trending);
  }, [news]);

  return {
    news,
    loading,
    error,
    lastUpdate,
    refreshNews,
    getNewsByCategory,
    getTopNews,
    getTrendingNews
  };
};
