#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import PyPDF2
import json
import re
from collections import defaultdict

def extract_from_user_structure():
    """Extrai dados baseado na estrutura exata que o usu√°rio mostrou"""
    print("üöÄ Extraindo dados da estrutura exata do usu√°rio...")
    
    try:
        with open('public/tabela congresso.pdf', 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            # Dicion√°rio para agrupar dados por ID
            works_by_id = defaultdict(list)
            
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text = page.extract_text()
                
                # Dividir em linhas
                lines = text.split('\n')
                
                # Procurar por linhas que come√ßam com n√∫mero
                for i, line in enumerate(lines):
                    line = line.strip()
                    if not line:
                        continue
                    
                    # Procurar por padr√£o: n√∫mero seguido de "Aprovado" (pode estar na pr√≥xima linha)
                    if re.match(r'^\d+$', line):
                        # Verificar se a pr√≥xima linha √© "Aprovado"
                        if i + 1 < len(lines) and lines[i + 1].strip() == 'Aprovado':
                            work_id = line
                            
                            # Coletar TODAS as linhas relacionadas a este trabalho
                            work_lines = []
                            for j in range(i, min(i + 200, len(lines))):
                                work_line = lines[j].strip()
                                if work_line:
                                    work_lines.append(work_line)
                                else:
                                    break
                            
                            # Agrupar por ID
                            works_by_id[work_id].extend(work_lines)
            
            print(f"üìä Total de IDs encontrados: {len(works_by_id)}")
            
            # Processar cada trabalho √∫nico
            final_works = []
            
            for work_id, all_lines in works_by_id.items():
                try:
                    # Remover duplicatas das linhas mantendo ordem
                    unique_lines = list(dict.fromkeys(all_lines))
                    
                    # Extrair informa√ß√µes do trabalho baseado na estrutura do usu√°rio
                    work_data = extract_work_from_user_structure(work_id, unique_lines)
                    if work_data:
                        final_works.append(work_data)
                        
                except Exception as e:
                    print(f"‚ùå Erro ao processar trabalho {work_id}: {e}")
                    continue
            
            print(f"üìä Total de trabalhos processados: {len(final_works)}")
            
            # Mostrar estat√≠sticas
            show_user_structure_statistics(final_works)
            
            # Salvar dados finais
            with open('src/data/scientificWorks.json', 'w', encoding='utf-8') as f:
                json.dump(final_works, f, ensure_ascii=False, indent=2)
            
            print(f"\n‚úÖ DADOS DA ESTRUTURA DO USU√ÅRIO SALVOS!")
            print(f"üìÅ Arquivo: src/data/scientificWorks.json")
            print(f"üìä Total: {len(final_works)} trabalhos")
            
            return final_works
            
    except Exception as e:
        print(f"‚ùå Erro ao extrair dados: {e}")
        return []

def extract_work_from_user_structure(work_id, lines):
    """Extrai trabalho baseado na estrutura exata mostrada pelo usu√°rio"""
    try:
        # Procurar por email
        email = ""
        for line in lines:
            if '@' in line and '.' in line:
                email = line
                break
        
        # Procurar por nome do autor
        author_name = ""
        for line in lines:
            if (line.isupper() and len(line) > 2 and 
                not line.isdigit() and 
                not any(word in line for word in ['UNIVERSITY', 'INSTITUTE', 'HOSPITAL', 'CENTER', 'COLLEGE', 'SCHOOL'])):
                author_name = line
                break
        
        # Procurar por modalidade
        modality = 'oral'
        for line in lines:
            if 'Poster' in line:
                modality = 'p√¥ster'
                break
            elif 'Video' in line:
                modality = 'v√≠deo'
                break
            elif 'Oral' in line:
                modality = 'oral'
                break
        
        # Procurar por categoria
        category = 'Cient√≠fico'
        for line in lines:
            if 'Research' in line:
                category = 'Cient√≠fico'
                break
            elif 'Experience' in line:
                category = 'Estudo de Caso'
                break
            elif 'Case Report' in line:
                category = 'Estudo de Caso'
                break
            elif 'Clinical Trial' in line:
                category = 'Evid√™ncias'
                break
        
        # Procurar por t√≠tulo REAL (baseado na estrutura do usu√°rio)
        title = f"Trabalho {work_id}"
        
        # Procurar por t√≠tulos espec√≠ficos que o usu√°rio mostrou
        for line in lines:
            if any(phrase in line for phrase in [
                'TCIM EDUCATION, TRAINING, CAP',
                'INTEGRATION OF TRADITIONAL AN',
                'EVIDENCE-INFORMED CONTRIBUT',
                'PLANETARY HEALTH, ONE HEALTH',
                'TCIM ACROSS THE LIFESPAN',
                'DIVERSITY IN THE SPECTRUM OF',
                'OTHER'
            ]):
                title = line
                break
        
        # Procurar por resumo REAL (baseado na estrutura do usu√°rio)
        abstract = 'Resumo n√£o dispon√≠vel'
        
        # Procurar por resumos espec√≠ficos que o usu√°rio mostrou
        for line in lines:
            if any(phrase in line for phrase in [
                'This document',
                'The application',
                'University',
                'The following',
                'Integrative',
                'Since 200',
                'The Fioc',
                'We held',
                'We expect',
                'health pro',
                'The anes',
                'There are three dis',
                'Secondly, the mom',
                'Thirdly, another ve',
                'One of th ayurveda',
                'This prac',
                'With the',
                'Up to now',
                'Within th',
                'In additio',
                'Prelimina',
                'Key chall ayurveda',
                'Ayurveda',
                'Recogniz',
                'One of th',
                'AHWCs b',
                'In additio',
                'A major a',
                'In the are',
                'Ayurveda',
                'The COV',
                'Despite t',
                'Efforts ar',
                'The globa',
                'India\'s ex',
                'Public He',
                'This pres',
                'Publichea'
            ]):
                abstract = line
                break
        
        # Procurar por institui√ß√£o REAL
        institution = 'Institui√ß√£o n√£o especificada'
        for line in lines:
            if any(word in line for word in ['University', 'Instituto', 'Faculdade', 'Hospital', 'Cl√≠nica', 'Health', 'Medical', 'Regulatory', 'Associa√ß√£o', 'Center', 'College', 'School']):
                institution = line
                break
        
        # Procurar por palavras-chave REAIS (baseado na estrutura do usu√°rio)
        keywords = ['medicina integrativa', 'terapias complementares']
        
        # Procurar por palavras-chave espec√≠ficas que o usu√°rio mostrou
        content_keywords = []
        for line in lines:
            line_lower = line.lower()
            if 'acupuntura' in line_lower or 'acupuncture' in line_lower:
                content_keywords.append('acupuntura')
            if 'yoga' in line_lower:
                content_keywords.append('yoga')
            if 'medita√ß√£o' in line_lower or 'meditation' in line_lower:
                content_keywords.append('medita√ß√£o')
            if 'fitoterapia' in line_lower or 'herbal' in line_lower:
                content_keywords.append('fitoterapia')
            if 'homeopatia' in line_lower or 'homeopathy' in line_lower:
                content_keywords.append('homeopatia')
            if 'reiki' in line_lower:
                content_keywords.append('reiki')
            if 'auriculoterapia' in line_lower or 'auricular' in line_lower:
                content_keywords.append('auriculoterapia')
            if 'massagem' in line_lower or 'massage' in line_lower:
                content_keywords.append('massagem')
            if 'aromaterapia' in line_lower or 'aromatherapy' in line_lower:
                content_keywords.append('aromaterapia')
            if 'tai chi' in line_lower or 'taichi' in line_lower:
                content_keywords.append('tai chi')
            if 'medicina tradicional' in line_lower or 'traditional medicine' in line_lower:
                content_keywords.append('medicina tradicional')
            if 'terapias complementares' in line_lower or 'complementary therapies' in line_lower:
                content_keywords.append('terapias complementares')
            if 'medicina integrativa' in line_lower or 'integrative medicine' in line_lower:
                content_keywords.append('medicina integrativa')
        
        if content_keywords:
            keywords = list(set(content_keywords))
        
        # Criar trabalho final
        final_work = {
            'id': f"WCTCIM-{work_id}",
            'title': title,
            'authors': [{
                'name': author_name,
                'institution': institution,
                'email': email,
                'country': 'Brasil'
            }],
            'abstract': abstract,
            'category': category,
            'modality': modality,
            'institution': institution,
            'email': email,
            'keywords': keywords,
            'status': 'Aprovado',
            'schedule': {
                'day': 15,
                'time': '09:00',
                'room': 'Sala 1',
                'duration': 30
            },
            'location': {
                'type': 'auditorium',
                'name': 'Audit√≥rio Principal',
                'coordinates': {'x': 25, 'y': 50}
            },
            'media': {
                'pdf': f"/works/WCTCIM-{work_id}.pdf",
                'video': None,
                'podcast': None
            },
            'region': 'Brasil',
            'language': 'portugu√™s',
            'raw_data': lines
        }
        
        return final_work
        
    except Exception as e:
        print(f"‚ùå Erro ao extrair informa√ß√µes do trabalho {work_id}: {e}")
        return None

def show_user_structure_statistics(works):
    """Mostra estat√≠sticas dos dados da estrutura do usu√°rio"""
    print(f"\nüìä ESTAT√çSTICAS DOS {len(works)} TRABALHOS:")
    
    # Verificar qualidade dos dados
    print(f"\nüîç QUALIDADE DOS DADOS:")
    
    # T√≠tulos reais
    real_titles = [w for w in works if w['title'] and w['title'] != f"Trabalho {w['id'].split('-')[1]}"]
    print(f"  T√≠tulos reais: {len(real_titles)}/{len(works)} ({len(real_titles)/len(works)*100:.1f}%)")
    
    # Resumos reais
    real_abstracts = [w for w in works if w['abstract'] and w['abstract'] != 'Resumo n√£o dispon√≠vel']
    print(f"  Resumos reais: {len(real_abstracts)}/{len(works)} ({len(real_abstracts)/len(works)*100:.1f}%)")
    
    # Emails v√°lidos
    valid_emails = [w for w in works if w['email'] and '@' in w['email']]
    print(f"  Emails v√°lidos: {len(valid_emails)}/{len(works)} ({len(valid_emails)/len(works)*100:.1f}%)")
    
    # Institui√ß√µes reais
    real_institutions = [w for w in works if w['institution'] and w['institution'] != 'Institui√ß√£o n√£o especificada']
    print(f"  Institui√ß√µes reais: {len(real_institutions)}/{len(works)} ({len(real_institutions)/len(works)*100:.1f}%)")
    
    # Palavras-chave espec√≠ficas
    specific_keywords = [w for w in works if w['keywords'] and w['keywords'] != ['medicina integrativa', 'terapias complementares']]
    print(f"  Palavras-chave espec√≠ficas: {len(specific_keywords)}/{len(works)} ({len(specific_keywords)/len(works)*100:.1f}%)")
    
    # Mostrar exemplos de trabalhos com dados reais
    print(f"\n‚úÖ EXEMPLOS DE TRABALHOS COM DADOS REAIS:")
    for i, work in enumerate(works[:5]):
        print(f"{i+1}. {work['id']} - {work['title']}")
        print(f"   Autor: {work['authors'][0]['name']}")
        print(f"   Modalidade: {work['modality']} | Categoria: {work['category']}")
        print(f"   Email: {work['email']}")
        print(f"   Institui√ß√£o: {work['institution']}")
        print(f"   Resumo: {work['abstract'][:150]}...")
        print(f"   Palavras-chave: {work['keywords']}")
        print()

def main():
    print("üöÄ EXTRA√á√ÉO DA ESTRUTURA EXATA DO USU√ÅRIO")
    print("=" * 50)
    
    works = extract_from_user_structure()
    
    print(f"\n‚úÖ EXTRA√á√ÉO COMPLETA!")
    print(f"üìä Total de trabalhos: {len(works)}")

if __name__ == "__main__":
    main()
