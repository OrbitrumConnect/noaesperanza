#!/bin/bash

echo "üöÄ ORBITRUM CONNECT - DEPLOY VERCEL"
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar pr√©-requisitos
echo -e "${BLUE}üìã Verificando pr√©-requisitos...${NC}"

if ! command_exists git; then
    echo -e "${RED}‚ùå Git n√£o encontrado. Instale o Git primeiro.${NC}"
    exit 1
fi

if ! command_exists node; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado. Instale o Node.js primeiro.${NC}"
    exit 1
fi

if ! command_exists npm; then
    echo -e "${RED}‚ùå NPM n√£o encontrado. Instale o NPM primeiro.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Pr√©-requisitos OK${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Execute este script na raiz do projeto Orbitrum${NC}"
    exit 1
fi

# Verificar se tem arquivo .env ou vari√°veis necess√°rias
echo -e "${BLUE}üîê Verificando configura√ß√µes...${NC}"

if [ ! -f ".env" ] && [ -z "$VITE_SUPABASE_URL" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Configure as vari√°veis de ambiente no Vercel Dashboard${NC}"
    echo -e "${BLUE}üìù Use o arquivo vercel-env-example.txt como refer√™ncia${NC}"
fi

# Instalar depend√™ncias
echo -e "${BLUE}üì¶ Instalando depend√™ncias...${NC}"
npm install

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro ao instalar depend√™ncias${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"

# Testar build local
echo -e "${BLUE}üîß Testando build local...${NC}"
npm run build:vercel

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro no build local${NC}"
    echo -e "${YELLOW}üí° Verifique os logs acima e corrija os erros${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Build local OK${NC}"

# Verificar status do git
echo -e "${BLUE}üìù Verificando status do Git...${NC}"
git status --porcelain

if [ $? -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas${NC}"
    read -p "Deseja fazer commit das mudan√ßas? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git add .
        git commit -m "Deploy Vercel - $(date)"
        echo -e "${GREEN}‚úÖ Mudan√ßas commitadas${NC}"
    fi
fi

# Verificar se tem remote origin
if ! git remote get-url origin >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Remote origin n√£o configurado${NC}"
    echo -e "${YELLOW}üí° Configure o remote do GitHub primeiro:${NC}"
    echo -e "${BLUE}   git remote add origin https://github.com/seu-usuario/seu-repo.git${NC}"
    exit 1
fi

# Push para GitHub
echo -e "${BLUE}üì§ Fazendo push para GitHub...${NC}"
git push origin main

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro ao fazer push${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Push realizado com sucesso${NC}"

# Instru√ß√µes finais
echo -e "${BLUE}üéØ PR√ìXIMOS PASSOS:${NC}"
echo -e "${YELLOW}1. Acesse: https://vercel.com/dashboard${NC}"
echo -e "${YELLOW}2. Clique em 'New Project'${NC}"
echo -e "${YELLOW}3. Importe seu reposit√≥rio do GitHub${NC}"
echo -e "${YELLOW}4. Configure as vari√°veis de ambiente:${NC}"
echo -e "${BLUE}   - VITE_SUPABASE_URL${NC}"
echo -e "${BLUE}   - VITE_SUPABASE_ANON_KEY${NC}"
echo -e "${BLUE}   - DATABASE_URL${NC}"
echo -e "${BLUE}   - SESSION_SECRET${NC}"
echo -e "${YELLOW}5. Build Command: npm run build:vercel${NC}"
echo -e "${YELLOW}6. Output Directory: dist${NC}"
echo -e "${YELLOW}7. Clique em 'Deploy'${NC}"

echo -e "${GREEN}üéâ Deploy preparado com sucesso!${NC}"
echo -e "${BLUE}üìñ Consulte DEPLOY-VERCEL-COMPLETO.md para instru√ß√µes detalhadas${NC}" 