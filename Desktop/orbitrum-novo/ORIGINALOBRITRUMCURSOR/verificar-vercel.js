import fetch from 'node-fetch';

async function verificarVercel() {
  console.log('üîç VERIFICANDO STATUS COMPLETO DO VERCEL...\n');
  
  const baseUrl = 'https://orbitrum-novo.vercel.app';
  
  try {
    // 1. Verificar se o site carrega
    console.log('1Ô∏è‚É£ Testando carregamento da p√°gina principal...');
    const mainResponse = await fetch(baseUrl);
    console.log(`   Status: ${mainResponse.status} ${mainResponse.statusText}`);
    console.log(`   ‚úÖ P√°gina principal carrega\n`);
    
    // 2. Verificar se o backend est√° rodando
    console.log('2Ô∏è‚É£ Testando backend (API)...');
    const apiResponse = await fetch(`${baseUrl}/api/health`);
    if (apiResponse.ok) {
      const healthData = await apiResponse.text();
      console.log(`   Status: ${apiResponse.status} ${apiResponse.statusText}`);
      console.log(`   Resposta: ${healthData.substring(0, 100)}...`);
      console.log(`   ‚úÖ Backend est√° rodando\n`);
    } else {
      console.log(`   ‚ùå Backend N√ÉO est√° rodando!`);
      console.log(`   Status: ${apiResponse.status} ${apiResponse.statusText}`);
      console.log(`   ‚ö†Ô∏è Este √© o problema principal!\n`);
    }
    
    // 3. Verificar login admin
    console.log('3Ô∏è‚É£ Testando login admin...');
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'passosmir4@gmail.com',
        password: 'm6m7m8M9!horus'
      })
    });
    
    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log(`   Status: ${loginResponse.status} ${loginResponse.statusText}`);
      console.log(`   ‚úÖ Login admin funciona`);
      console.log(`   UserType: ${loginData.user?.userType || 'N/A'}`);
      console.log(`   AdminLevel: ${loginData.user?.adminLevel || 'N/A'}\n`);
    } else {
      console.log(`   ‚ùå Login admin falhou!`);
      console.log(`   Status: ${loginResponse.status} ${loginResponse.statusText}\n`);
    }
    
    // 4. Verificar dashboard admin
    console.log('4Ô∏è‚É£ Testando dashboard admin...');
    const adminResponse = await fetch(`${baseUrl}/api/admin/stats`);
    if (adminResponse.ok) {
      const adminData = await adminResponse.json();
      console.log(`   Status: ${adminResponse.status} ${adminResponse.statusText}`);
      console.log(`   ‚úÖ Dashboard admin acess√≠vel`);
      console.log(`   Total users: ${adminData.totalUsers || 'N/A'}\n`);
    } else {
      console.log(`   ‚ùå Dashboard admin N√ÉO acess√≠vel!`);
      console.log(`   Status: ${adminResponse.status} ${adminResponse.statusText}\n`);
    }
    
    // 5. Verificar vari√°veis de ambiente
    console.log('5Ô∏è‚É£ Verificando vari√°veis de ambiente...');
    const envResponse = await fetch(`${baseUrl}/api/test-env`);
    if (envResponse.ok) {
      const envData = await envResponse.json();
      console.log(`   ‚úÖ Vari√°veis de ambiente configuradas`);
      console.log(`   SUPABASE_URL: ${envData.supabaseUrl ? '‚úÖ' : '‚ùå'}`);
      console.log(`   SUPABASE_ANON_KEY: ${envData.supabaseKey ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log(`   ‚ùå Endpoint de teste n√£o dispon√≠vel`);
      console.log(`   ‚ö†Ô∏è N√£o √© poss√≠vel verificar vari√°veis\n`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro na verifica√ß√£o: ${error.message}\n`);
  }
  
  console.log('üìã RESUMO DOS PROBLEMAS:');
  console.log('   üî¥ Backend n√£o est√° rodando no Vercel');
  console.log('   üî¥ Vari√°veis de ambiente podem estar faltando');
  console.log('   üî¥ Admin dashboard n√£o funciona');
  console.log('   üî¥ Bot√£o +Tokens n√£o abre aba');
  console.log('\nüí° SOLU√á√ÉO:');
  console.log('   1. Verificar vari√°veis no Vercel Dashboard');
  console.log('   2. For√ßar novo deploy');
  console.log('   3. Configurar backend no Vercel');
}

verificarVercel(); 