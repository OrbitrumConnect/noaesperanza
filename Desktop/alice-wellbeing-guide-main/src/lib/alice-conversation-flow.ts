// Sistema de Fluxo de Conversa√ß√£o Inteligente da Alice
// Evita repeti√ß√µes e guia progressivamente para coleta de dados

interface ConversationState {
  userId: string;
  currentTopic: string;
  topicsDiscussed: string[];
  dataCollected: { [key: string]: any };
  conversationStage: 'greeting' | 'data_collection' | 'analysis' | 'planning' | 'follow_up';
  lastResponse: string;
  responseCount: number;
  urgentDataNeeded: string[];
  nextSuggestedTopic: string;
}

interface DataCollectionTrigger {
  topic: string;
  keywords: string[];
  questions: string[];
  dataField: string;
  priority: 'high' | 'medium' | 'low';
  followUpTopics: string[];
}

export class AliceConversationFlow {
  private conversationStates: Map<string, ConversationState> = new Map();
  
  // Triggers para coleta de dados espec√≠ficos
  private dataCollectionTriggers: DataCollectionTrigger[] = [
    {
      topic: 'alimentacao_atual',
      keywords: ['como', 'comer', 'alimento', 'refei√ß√£o', 'dieta'],
      questions: [
        'Me conte como est√° sua alimenta√ß√£o atualmente?',
        'Quais s√£o suas refei√ß√µes favoritas?',
        'Tem algum alimento que voc√™ evita?'
      ],
      dataField: 'current_diet',
      priority: 'high',
      followUpTopics: ['horarios_refeicao', 'preferencias_alimentares']
    },
    {
      topic: 'sono_energia',
      keywords: ['sono', 'dormir', 'cansa√ßo', 'energia', 'disposi√ß√£o'],
      questions: [
        'Como tem sido seu sono ultimamente?',
        'A que horas voc√™ costuma dormir e acordar?',
        'Como est√° sua energia durante o dia?'
      ],
      dataField: 'sleep_energy',
      priority: 'high',
      followUpTopics: ['estresse_nivel', 'atividade_fisica']
    },
    {
      topic: 'objetivos_saude',
      keywords: ['objetivo', 'meta', 'quero', 'preciso', 'melhorar'],
      questions: [
        'Qual √© seu principal objetivo de sa√∫de?',
        'O que voc√™ mais gostaria de melhorar?',
        'Como voc√™ se v√™ daqui a 90 dias?'
      ],
      dataField: 'health_goals',
      priority: 'high',
      followUpTopics: ['motivacao', 'desafios_atuais']
    },
    {
      topic: 'sintomas_atuais',
      keywords: ['dor', 'sintoma', 'problema', 'incomodo', 'sente'],
      questions: [
        'Tem algum sintoma que te incomoda?',
        'Como est√° se sentindo fisicamente?',
        'H√° algo espec√≠fico que gostaria de melhorar no seu corpo?'
      ],
      dataField: 'current_symptoms',
      priority: 'medium',
      followUpTopics: ['historico_saude', 'medicamentos']
    },
    {
      topic: 'rotina_diaria',
      keywords: ['rotina', 'dia', 'trabalho', 'atividade', 'hor√°rio'],
      questions: [
        'Me conte sobre sua rotina di√°ria?',
        'Como s√£o seus dias de trabalho?',
        'Que atividades voc√™ mais gosta de fazer?'
      ],
      dataField: 'daily_routine',
      priority: 'medium',
      followUpTopics: ['tempo_livre', 'exercicios']
    }
  ];

  // Obt√©m ou cria estado da conversa
  private getConversationState(userId: string): ConversationState {
    if (!this.conversationStates.has(userId)) {
      this.conversationStates.set(userId, {
        userId,
        currentTopic: 'greeting',
        topicsDiscussed: [],
        dataCollected: {},
        conversationStage: 'greeting',
        lastResponse: '',
        responseCount: 0,
        urgentDataNeeded: ['alimentacao_atual', 'sono_energia', 'objetivos_saude'],
        nextSuggestedTopic: 'alimentacao_atual'
      });
    }
    return this.conversationStates.get(userId)!;
  }

  // Analisa mensagem do usu√°rio e detecta t√≥picos
  private analyzeMessage(message: string): { 
    detectedTopics: string[], 
    mood: 'positive' | 'neutral' | 'concerned' | 'excited' | 'tired',
    needsDataCollection: boolean 
  } {
    const messageText = message.toLowerCase();
    const detectedTopics: string[] = [];
    
    // Detectar t√≥picos baseado em palavras-chave
    this.dataCollectionTriggers.forEach(trigger => {
      if (trigger.keywords.some(keyword => messageText.includes(keyword))) {
        detectedTopics.push(trigger.topic);
      }
    });

    // Detectar humor
    let mood: 'positive' | 'neutral' | 'concerned' | 'excited' | 'tired' = 'neutral';
    if (messageText.includes('cansad') || messageText.includes('sono')) mood = 'tired';
    if (messageText.includes('ansios') || messageText.includes('stress')) mood = 'concerned';
    if (messageText.includes('bem') || messageText.includes('√≥tim')) mood = 'positive';
    if (messageText.includes('motiv') || messageText.includes('empolgad')) mood = 'excited';

    // Determinar se precisa de coleta de dados
    const needsDataCollection = detectedTopics.length === 0 && messageText.length < 30;

    return { detectedTopics, mood, needsDataCollection };
  }

  // Gera resposta inteligente e progressiva
  generateProgressiveResponse(
    message: string,
    userId: string,
    userName: string = ''
  ): {
    response: string;
    suggestions: string[];
    mood: string;
    biohacking_tip: string;
    frequency_suggestion: string;
    personalization_note: string;
    clickableOptions: { text: string; action: string; dataField?: string }[];
  } {
    const state = this.getConversationState(userId);
    const analysis = this.analyzeMessage(message);
    
    // Evitar repeti√ß√£o da mesma resposta
    state.responseCount++;
    
    let response = '';
    let suggestions: string[] = [];
    let clickableOptions: { text: string; action: string; dataField?: string }[] = [];

    // L√≥gica principal de resposta baseada no est√°gio
    if (state.conversationStage === 'greeting' && state.responseCount === 1) {
      response = `Ol√°, ${userName}! Que bom te encontrar aqui! üåü Estou super animada para nossa conversa de hoje. Percebi que voc√™ completou a pr√©-consulta, ent√£o j√° tenho algumas informa√ß√µes suas.`;
      
      // Sugest√µes clic√°veis para guiar a conversa
      clickableOptions = [
        { text: "Vamos falar sobre minha alimenta√ß√£o atual", action: "discuss_topic", dataField: "alimentacao_atual" },
        { text: "Quero melhorar meu sono e energia", action: "discuss_topic", dataField: "sono_energia" },
        { text: "Qual meu principal objetivo?", action: "discuss_topic", dataField: "objetivos_saude" }
      ];
      
      state.conversationStage = 'data_collection';
      state.nextSuggestedTopic = 'alimentacao_atual';
      
    } else if (state.conversationStage === 'data_collection') {
      // Verificar se h√° t√≥picos detectados na mensagem
      if (analysis.detectedTopics.length > 0) {
        const primaryTopic = analysis.detectedTopics[0];
        const trigger = this.dataCollectionTriggers.find(t => t.topic === primaryTopic);
        
        if (trigger && !state.topicsDiscussed.includes(primaryTopic)) {
          response = this.generateTopicResponse(primaryTopic, message, analysis.mood);
          state.topicsDiscussed.push(primaryTopic);
          state.currentTopic = primaryTopic;
          
          // Coletas dados baseados na resposta
          state.dataCollected[trigger.dataField] = this.extractDataFromMessage(message, primaryTopic);
          
          // Sugerir pr√≥ximos t√≥picos
          clickableOptions = trigger.followUpTopics.map(topic => ({
            text: this.getTopicPrompt(topic),
            action: "discuss_topic",
            dataField: topic
          }));
          
        } else {
          // Aprofundar no t√≥pico atual
          response = this.generateFollowUpQuestion(primaryTopic, message, analysis.mood);
        }
      } else {
        // Guiar para pr√≥ximo t√≥pico necess√°rio
        const nextTopic = this.getNextPriorityTopic(state);
        response = this.generateTopicTransition(nextTopic, analysis.mood);
        
        clickableOptions = [
          { text: `Vamos falar sobre ${this.getTopicDisplayName(nextTopic)}`, action: "discuss_topic", dataField: nextTopic },
          { text: "Quero contar sobre outro assunto", action: "open_topic" },
          { text: "Como est√° meu progresso?", action: "show_progress" }
        ];
      }
    }

    // Atualizar estado
    state.lastResponse = response;
    this.conversationStates.set(userId, state);

    // Gerar elementos complementares
    const biohacking_tip = this.generateContextualBiohacking(analysis.mood, state.currentTopic);
    const frequency_suggestion = this.generateFrequencySuggestion(analysis.mood);
    const personalization_note = this.generatePersonalizationNote(state);

    return {
      response,
      suggestions,
      mood: analysis.mood,
      biohacking_tip,
      frequency_suggestion,
      personalization_note,
      clickableOptions
    };
  }

  private generateTopicResponse(topic: string, message: string, mood: string): string {
    const responses = {
      alimentacao_atual: [
        "Adorei saber sobre sua alimenta√ß√£o! √â incr√≠vel como pequenas mudan√ßas podem transformar nossa energia.",
        "Que interessante sua rotina alimentar! Vejo algumas oportunidades incr√≠veis para potencializar seus resultados.",
        "Sua alimenta√ß√£o j√° tem pontos positivos! Vamos juntas descobrir como deix√°-la ainda mais nutritiva e prazerosa."
      ],
      sono_energia: [
        "O sono √© fundamental para nossa recupera√ß√£o! Percebo que voc√™ tem consci√™ncia sobre isso.",
        "Energia e sono andam juntos! Que bom que voc√™ trouxe esse t√≥pico importante.",
        "Seu corpo est√° pedindo aten√ß√£o no sono! Isso √© muito comum e tem solu√ß√µes simples e eficazes."
      ],
      objetivos_saude: [
        "Seus objetivos mostram que voc√™ est√° realmente comprometida com sua transforma√ß√£o!",
        "Que clareza incr√≠vel sobre o que voc√™ quer! Isso j√° √© meio caminho andado para o sucesso.",
        "Seus objetivos s√£o totalmente alcan√ß√°veis! Vamos criar um caminho claro para chegar l√°."
      ]
    };

    const topicResponses = responses[topic as keyof typeof responses] || ["Muito interessante o que voc√™ compartilhou!"];
    return topicResponses[Math.floor(Math.random() * topicResponses.length)];
  }

  private generateTopicTransition(nextTopic: string, mood: string): string {
    const transitions = {
      alimentacao_atual: "Que tal conversarmos sobre como est√° sua alimenta√ß√£o no dia a dia? Tenho algumas dicas incr√≠veis para compartilhar!",
      sono_energia: "Vamos falar sobre sono e energia? Esses s√£o pilares fundamentais para sua sa√∫de e bem-estar!",
      objetivos_saude: "Me conta qual seu principal objetivo de sa√∫de? Quero entender melhor como posso te ajudar!",
      sintomas_atuais: "Como voc√™ est√° se sentindo fisicamente? Seu corpo tem alguma mensagem importante para n√≥s?",
      rotina_diaria: "Me conte sobre sua rotina! Quero entender como podemos integrar h√°bitos saud√°veis no seu dia a dia."
    };

    return transitions[nextTopic as keyof typeof transitions] || "Vamos explorar mais sobre sua jornada de sa√∫de?";
  }

  private getNextPriorityTopic(state: ConversationState): string {
    // Encontrar pr√≥ximo t√≥pico de alta prioridade n√£o discutido
    for (const topic of state.urgentDataNeeded) {
      if (!state.topicsDiscussed.includes(topic)) {
        return topic;
      }
    }
    
    // Se todos os urgentes foram discutidos, pegar pr√≥ximo de prioridade m√©dia
    const allTopics = this.dataCollectionTriggers.map(t => t.topic);
    return allTopics.find(topic => !state.topicsDiscussed.includes(topic)) || 'objetivos_saude';
  }

  private generateContextualBiohacking(mood: string, currentTopic: string): string {
    const biohacks = {
      tired: "Experimente 5 respira√ß√µes profundas seguidas de um copo de √°gua gelada - desperta o sistema nervoso!",
      concerned: "Coloque as m√£os no cora√ß√£o e respire profundamente por 30 segundos - acalma instantaneamente.",
      positive: "Aproveite essa energia! Fa√ßa 10 polichinelos ou dance uma m√∫sica - potencializa o bem-estar!",
      excited: "Canalize essa energia! Escreva 3 gratid√µes do dia - amplifica sentimentos positivos.",
      neutral: "Hidrata√ß√£o consciente: beba √°gua devagar, sentindo cada gole nutrir suas c√©lulas."
    };

    return biohacks[mood as keyof typeof biohacks] || biohacks.neutral;
  }

  private generateFrequencySuggestion(mood: string): string {
    const frequencies = {
      tired: "Frequ√™ncia 528Hz - Energia celular e vitalidade (15 min)",
      concerned: "Frequ√™ncia 396Hz - Libera√ß√£o de medos e ansiedade (20 min)",
      positive: "Frequ√™ncia 963Hz - Conex√£o com bem-estar superior (10 min)",
      excited: "Frequ√™ncia 528Hz - Amplifica alegria e vitalidade (15 min)",
      neutral: "Frequ√™ncia 741Hz - Clareza mental e foco (15 min)"
    };

    return frequencies[mood as keyof typeof frequencies] || frequencies.neutral;
  }

  private generatePersonalizationNote(state: ConversationState): string {
    if (state.topicsDiscussed.length === 0) {
      return "Estou ansiosa para conhecer melhor voc√™ e personalizar nossas conversas!";
    }
    
    if (state.topicsDiscussed.length < 3) {
      return `J√° conversamos sobre ${state.topicsDiscussed.length} t√≥picos importantes. Estou aprendendo sobre voc√™!`;
    }
    
    return `Que conversa rica! J√° coletamos informa√ß√µes valiosas sobre ${state.topicsDiscussed.join(', ')}. Isso me ajuda a personalizar ainda mais nossas intera√ß√µes.`;
  }

  private extractDataFromMessage(message: string, topic: string): any {
    // L√≥gica simples para extrair dados da mensagem baseado no t√≥pico
    return {
      raw_response: message,
      timestamp: new Date().toISOString(),
      topic: topic,
      processed: true
    };
  }

  private generateFollowUpQuestion(topic: string, message: string, mood: string): string {
    const followUps = {
      alimentacao_atual: [
        "E sobre os hor√°rios das refei√ß√µes? Voc√™ tem uma rotina estabelecida?",
        "Que ingredientes voc√™ mais gosta de usar no dia a dia?",
        "Tem algum alimento que te d√° mais energia ou disposi√ß√£o?"
      ],
      sono_energia: [
        "E sobre a qualidade do seu sono? Voc√™ acorda descansada?",
        "Tem algum ritual antes de dormir que te ajuda a relaxar?",
        "Como est√° sua energia logo pela manh√£?"
      ],
      objetivos_saude: [
        "O que te motiva mais a alcan√ßar esse objetivo?",
        "J√° tentou alguma estrat√©gia antes para isso?",
        "Como voc√™ vai saber que alcan√ßou seu objetivo?"
      ]
    };

    const topicFollowUps = followUps[topic as keyof typeof followUps] || ["Conte-me mais sobre isso!"];
    return topicFollowUps[Math.floor(Math.random() * topicFollowUps.length)];
  }

  private getTopicPrompt(topic: string): string {
    const prompts = {
      horarios_refeicao: "Vamos falar sobre hor√°rios das refei√ß√µes?",
      preferencias_alimentares: "Quais s√£o seus alimentos favoritos?",
      estresse_nivel: "Como est√° seu n√≠vel de estresse?",
      atividade_fisica: "E sobre exerc√≠cios f√≠sicos?",
      motivacao: "O que mais te motiva?",
      desafios_atuais: "Quais s√£o seus maiores desafios?"
    };

    return prompts[topic as keyof typeof prompts] || "Vamos explorar mais?";
  }

  private getTopicDisplayName(topic: string): string {
    const names = {
      alimentacao_atual: "alimenta√ß√£o atual",
      sono_energia: "sono e energia",
      objetivos_saude: "objetivos de sa√∫de",
      sintomas_atuais: "como voc√™ est√° se sentindo",
      rotina_diaria: "sua rotina di√°ria"
    };

    return names[topic as keyof typeof names] || topic;
  }

  // M√©todo para resetar conversa se necess√°rio
  resetConversation(userId: string) {
    this.conversationStates.delete(userId);
  }

  // M√©todo para obter progresso da coleta de dados
  getDataCollectionProgress(userId: string): { 
    completedTopics: string[]; 
    pendingTopics: string[]; 
    progressPercentage: number;
    collectedData: any;
  } {
    const state = this.getConversationState(userId);
    const totalTopics = this.dataCollectionTriggers.length;
    const completedTopics = state.topicsDiscussed;
    const pendingTopics = this.dataCollectionTriggers
      .map(t => t.topic)
      .filter(topic => !completedTopics.includes(topic));
    
    return {
      completedTopics,
      pendingTopics,
      progressPercentage: Math.round((completedTopics.length / totalTopics) * 100),
      collectedData: state.dataCollected
    };
  }
}