// ========================================
// ADMIN AGENT
// Acesso total ao sistema, banco de dados e funcionalidades admin
// ========================================

import { supabase } from '../integrations/supabase/client'
import { NoaContext } from './noaVisionIA'

export const adminAgent = {
  /**
   * Verifica se √© comando admin
   */
  canHandle(message: string, context: NoaContext): boolean {
    if (context.userProfile !== 'admin') return false
    
    const lower = message.toLowerCase()
    return (
      lower.includes('dashboard') ||
      lower.includes('kpi') ||
      lower.includes('analytics') ||
      lower.includes('estat√≠stica') ||
      lower.includes('base de conhecimento') ||
      lower.includes('desenvolvimento') ||
      lower.includes('ide') ||
      lower.includes('canvas') ||
      lower.includes('banco de dados') ||
      lower.includes('tabela') ||
      lower.includes('sql') ||
      lower.includes('documentos') ||
      lower.includes('usu√°rios') ||
      lower.includes('m√©tricas')
    )
  },
  
  /**
   * Processa comandos admin
   */
  async process(message: string, context: NoaContext): Promise<string> {
    const lower = message.toLowerCase()
    
    // 1Ô∏è‚É£ KPIs E ANALYTICS
    if (lower.includes('kpi') || lower.includes('m√©trica') || lower.includes('estat√≠stica')) {
      return this.getKPIs()
    }
    
    // 2Ô∏è‚É£ BASE DE CONHECIMENTO
    if (lower.includes('base de conhecimento') || lower.includes('documento')) {
      return this.getKnowledgeBaseInfo()
    }
    
    // 3Ô∏è‚É£ DESENVOLVIMENTO COLABORATIVO
    if (lower.includes('desenvolvimento') || lower.includes('colaborativo')) {
      return this.getDevInfo()
    }
    
    // 4Ô∏è‚É£ IDE
    if (lower.includes('ide') || lower.includes('editor') || lower.includes('c√≥digo')) {
      return this.getIDEInfo()
    }
    
    // 5Ô∏è‚É£ BANCO DE DADOS
    if (lower.includes('banco') || lower.includes('tabela') || lower.includes('sql')) {
      return this.getDatabaseInfo()
    }
    
    // 6Ô∏è‚É£ CANVAS/LOUSA
    if (lower.includes('canvas') || lower.includes('lousa') || lower.includes('diagrama')) {
      return this.getCanvasInfo()
    }
    
    // 7Ô∏è‚É£ USU√ÅRIOS
    if (lower.includes('usu√°rio') || lower.includes('paciente') || lower.includes('m√©dico')) {
      return this.getUsersInfo()
    }
    
    return this.getAdminOverview()
  },
  
  /**
   * KPIs do sistema
   */
  async getKPIs(): Promise<string> {
    try {
      const [users, assessments, documents, conversations] = await Promise.all([
        supabase.from('noa_users').select('*', { count: 'exact', head: true }),
        supabase.from('avaliacoes_iniciais').select('*', { count: 'exact', head: true }),
        supabase.from('gpt_documents').select('*', { count: 'exact', head: true }),
        supabase.from('ai_learning').select('*', { count: 'exact', head: true })
      ])
      
      const stats = await supabase.from('v_ai_learning_stats').select('*').single()
      
      return `üìä **KPIs do Sistema**

**Usu√°rios:**
üë• Total: ${users.count || 0}

**Avalia√ß√µes Cl√≠nicas:**
üè• Total realizadas: ${assessments.count || 0}

**Base de Conhecimento:**
üìÑ Documentos: ${documents.count || 0}
üß† Conversas aprendidas: ${conversations.count || 0}
${stats.data ? `üìà Taxa de reuso: ${((stats.data.total_reuses / stats.data.total_interactions) * 100).toFixed(1)}%` : ''}

**NoaVision IA:**
‚úÖ Embeddings ativos: ${stats.data?.with_embeddings || 0}
üìä Confian√ßa m√©dia: ${stats.data?.avg_confidence ? (stats.data.avg_confidence * 100).toFixed(1) + '%' : 'N/A'}
üîÑ Uso m√©dio: ${stats.data?.avg_usage?.toFixed(1) || 'N/A'}x por resposta

**Links r√°pidos:**
‚Ä¢ Ver todos os dados: /app/admin
‚Ä¢ Analytics completo: Dashboard > Analytics
‚Ä¢ Qualidade: Dashboard > Quality`
    } catch (error) {
      console.error('Erro ao buscar KPIs:', error)
      return `‚ùå Erro ao buscar m√©tricas. Verifique conex√£o com Supabase.`
    }
  },
  
  /**
   * Info da base de conhecimento
   */
  async getKnowledgeBaseInfo(): Promise<string> {
    try {
      const { count: docs } = await supabase
        .from('gpt_documents')
        .select('*', { count: 'exact', head: true })
      
      const { count: knowledge } = await supabase
        .from('knowledge_items')
        .select('*', { count: 'exact', head: true })
      
      const { data: recent } = await supabase
        .from('gpt_documents')
        .select('filename, created_at')
        .order('created_at', { ascending: false })
        .limit(5)
      
      let response = `üìö **Base de Conhecimento**

**Estat√≠sticas:**
üìÑ Documentos salvos: ${docs || 0}
üß† Itens de conhecimento: ${knowledge || 0}
`
      
      if (recent && recent.length > 0) {
        response += `\n**Documentos recentes:**\n`
        recent.forEach((doc, i) => {
          response += `${i + 1}. ${doc.filename}\n`
        })
      }
      
      response += `\n**Funcionalidades:**
‚Ä¢ Upload de documentos (.pdf, .docx, .txt)
‚Ä¢ Processamento autom√°tico
‚Ä¢ Busca sem√¢ntica
‚Ä¢ Chat com documentos
‚Ä¢ Compartilhamento

**Acesso:** Menu lateral > Base de Conhecimento`
      
      return response
    } catch (error) {
      return `üìö **Base de Conhecimento**\n\nFuncionalidade dispon√≠vel no menu lateral.`
    }
  },
  
  /**
   * Info desenvolvimento colaborativo
   */
  getDevInfo(): string {
    return `üîß **Desenvolvimento Colaborativo**

**Funcionalidades:**
‚Ä¢ Comandos em linguagem natural
‚Ä¢ Gera√ß√£o de c√≥digo
‚Ä¢ Debugging assistido
‚Ä¢ Versionamento integrado
‚Ä¢ Deploy autom√°tico

**Como usar:**
Digite comandos como:
‚Ä¢ "criar componente de login"
‚Ä¢ "corrigir erro no dashboard"
‚Ä¢ "adicionar valida√ß√£o no formul√°rio"
‚Ä¢ "implementar busca sem√¢ntica"

**Acesso:** Menu lateral > Desenvolvimento Colaborativo`
  },
  
  /**
   * Info IDE
   */
  getIDEInfo(): string {
    return `üíª **IDE Completo Integrado**

**Editor Inteligente:**
‚Ä¢ Syntax highlighting
‚Ä¢ Autocomplete
‚Ä¢ Linting em tempo real
‚Ä¢ Git integrado
‚Ä¢ Terminal integrado

**Assistente IA:**
‚Ä¢ Sugest√µes de c√≥digo
‚Ä¢ Refatora√ß√£o autom√°tica
‚Ä¢ Documenta√ß√£o inline
‚Ä¢ Debugging assistido

**Acesso:** 
‚Ä¢ /app/ide
‚Ä¢ Menu lateral > Abrir IDE Completo`
  },
  
  /**
   * Info banco de dados
   */
  async getDatabaseInfo(): Promise<string> {
    try {
      // Listar tabelas principais
      const tables = [
        'noa_users',
        'ai_learning',
        'gpt_documents',
        'knowledge_items',
        'embedding_cache',
        'user_consents',
        'shared_reports',
        'avaliacoes_iniciais'
      ]
      
      let response = `üóÑÔ∏è **Banco de Dados**

**Tabelas principais:**\n`
      
      for (const table of tables) {
        const { count } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true })
        
        response += `‚Ä¢ ${table}: ${count || 0} registros\n`
      }
      
      response += `
**Extens√µes:**
‚úÖ pgvector (embeddings)

**Fun√ß√µes:**
‚Ä¢ search_similar_embeddings()
‚Ä¢ search_documents_by_embedding()
‚Ä¢ search_knowledge_by_embedding()
‚Ä¢ search_all_context()

**Views:**
‚Ä¢ v_ai_learning_stats
‚Ä¢ v_embeddings_by_profile
‚Ä¢ v_document_stats
‚Ä¢ v_knowledge_stats

**Acesso SQL:**
Supabase Dashboard > SQL Editor`
      
      return response
    } catch (error) {
      return `üóÑÔ∏è **Banco de Dados**\n\nAcesse: Supabase Dashboard > SQL Editor`
    }
  },
  
  /**
   * Info Canvas/Lousa
   */
  getCanvasInfo(): string {
    return `üé® **Canvas/Lousa**

**Funcionalidades:**
‚Ä¢ Diagramas m√©dicos
‚Ä¢ Fluxogramas de tratamento
‚Ä¢ Anota√ß√µes visuais
‚Ä¢ Compartilhamento em tempo real
‚Ä¢ Exporta√ß√£o de imagens

**Como usar:**
‚Ä¢ Desenhar diagramas
‚Ä¢ Ilustrar sintomas
‚Ä¢ Explicar tratamentos
‚Ä¢ Colaborar com equipe

**Acesso:** Menu lateral > Canvas/Lousa`
  },
  
  /**
   * Info de usu√°rios
   */
  async getUsersInfo(): Promise<string> {
    try {
      const { data: users } = await supabase
        .from('noa_users')
        .select('user_type')
      
      // Contar manualmente por tipo
      const counts: Record<string, number> = {}
      users?.forEach((u: any) => {
        counts[u.user_type] = (counts[u.user_type] || 0) + 1
      })
      
      return `üë• **Gest√£o de Usu√°rios**

**Por tipo:**
${Object.entries(counts).map(([type, count]) => `‚Ä¢ ${type}: ${count}`).join('\n') || 'Carregando...'}

**Funcionalidades:**
‚Ä¢ Criar/editar usu√°rios
‚Ä¢ Gerenciar permiss√µes
‚Ä¢ Ver atividade
‚Ä¢ Exportar dados
‚Ä¢ An√°lise de uso

**Acesso:** /app/admin > Usu√°rios`
    } catch (error) {
      return `üë• **Gest√£o de Usu√°rios**\n\nAcesse: /app/admin > Usu√°rios`
    }
  },
  
  /**
   * Vis√£o geral do Admin
   */
  getAdminOverview(): string {
    return `üëë **Dashboard Admin - Vis√£o Geral**

**Funcionalidades dispon√≠veis:**

üìä **KPIs & Analytics**
"mostrar kpis" ou "estat√≠sticas"

üìö **Base de Conhecimento**
"ver documentos" ou "base de conhecimento"

üîß **Desenvolvimento Colaborativo**
"desenvolvimento colaborativo"

üíª **IDE Completo**
"abrir ide" ou "editor"

üé® **Canvas/Lousa**
"abrir canvas"

üóÑÔ∏è **Banco de Dados**
"ver banco de dados" ou "tabelas"

üë• **Usu√°rios**
"ver usu√°rios" ou "gest√£o de usu√°rios"

**Dica:** Seja espec√≠fico no que precisa e te direciono!`
  }
}

